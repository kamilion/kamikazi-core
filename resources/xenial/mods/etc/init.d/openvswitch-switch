#! /bin/sh
#
# Copyright (C) 2011, 2012 Nicira, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
### BEGIN INIT INFO
# Provides:          openvswitch-switch
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs
# X-Start-Before:    $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Open vSwitch switch
# Description:       openvswitch-switch provides the userspace components and utilities for
#                    the Open vSwitch kernel-based switch.
### END INIT INFO
#
# /usr/lib/insserv/insserv -r /etc/init.d/openvswitch-switch /etc/init.d/networking;
# /usr/lib/insserv/insserv /etc/init.d/openvswitch-switch /etc/init.d/networking;
# Note that $network and $named were removed from Required-Start.
# The X-Start-Before stanza was added and the networking init script was added.
# Starting the openvswitch-switch initscript now only starts the daemons.
# This service will now start before the networking service.
# Call service openvswitch-switch start-bridges from /etc/network/interfaces.d/ somewhere
# Or let the networking initscript try to bring things up with 'auto <bridgename> <bridgename>'.
# This service will still call ifdown on shutdown to close out the bridges.
# A better way to do this would be to check /etc/default/openvswitch-switch for a new variable instead.
#
# -- Kamilion (11/26/2014)

(test -x /usr/sbin/ovs-vswitchd && test -x /usr/sbin/ovsdb-server) || exit 0

. /usr/share/openvswitch/scripts/ovs-lib
test -e /etc/default/openvswitch-switch && . /etc/default/openvswitch-switch

network_interfaces () {
    [ -z "${RUNLEVEL}" ] && return
    INTERFACES="/etc/network/interfaces"
    [ -e "${INTERFACES}" ] || return
    bridges=`awk '{ if ($1 == "allow-ovs") { print $2; } }' "${INTERFACES}"`
    [ -n "${bridges}" ] && $1 --allow=ovs ${bridges}
    # We do this twice because interfaces.d may not exist.
    INTERFACE_DIR="/etc/network/interfaces.d"
    [ -d "${INTERFACE_DIR}" ] || return
    dir_bridges=`awk '{ if ($1 == "allow-ovs") { print $2; } }' ${INTERFACE_DIR}/*`
    [ -n "${dir_bridges}" ] && $1 --allow=ovs ${dir_bridges}
}

load_kmod () {
    ovs_ctl load-kmod || exit $?
}

start () {
    if ovs_ctl load-kmod; then
	:
    else
	echo "Module has probably not been built for this kernel."
	if ! test -d /usr/share/doc/openvswitch-datapath-source; then
	    echo "Install the openvswitch-datapath-source package, then read"
	else
            echo "For instructions, read"
	fi
	echo "/usr/share/doc/openvswitch-datapath-source/README.Debian"

	if test X"$OVS_MISSING_KMOD_OK" = Xyes; then
	    # We're being invoked by the package postinst.  Do not
	    # fail package installation just because the kernel module
	    # is not available.
	    exit 0
	fi
    fi
    set ovs_ctl ${1-start} --system-id=random
    if test X"$FORCE_COREFILES" != X; then
	set "$@" --force-corefiles="$FORCE_COREFILES"
    fi
    set "$@" $OVS_CTL_OPTS
    echo "OVSStart: Runlevel is xX${RUNLEVEL}Xx"
    "$@" || exit $?
    #[ "$2" = "start" ] && network_interfaces ifup
}

# Call service openvswitch-switch start-bridges from /etc/network/interfaces.d/ somewhere
start_bridges () {
    echo "OVSStart_bridges: Runlevel is xX${RUNLEVEL}Xx"
    oldRUNLEVEL=${RUNLEVEL}
    RUNLEVEL="yes"
    network_interfaces ifup
    RUNLEVEL=${oldRUNLEVEL}
}

stop () {
    network_interfaces ifdown
    ovs_ctl stop
}

restart () {
    # OVS_FORCE_RELOAD_KMOD can be set by package postinst script.
    if [ "$1" = "--save-flows=yes" ] || \
        [ "${OVS_FORCE_RELOAD_KMOD}" = "no" ]; then
        start restart
    elif [ "${OVS_FORCE_RELOAD_KMOD}" = "yes" ]; then
        depmod -a

        if [ -e /sys/module/openvswitch ]; then
            LOADED_SRCVERSION=`cat /sys/module/openvswitch/srcversion`
            LOADED_VERSION=`cat /sys/module/openvswitch/version`
        elif [ -e /sys/module/openvswitch_mod ]; then
            LOADED_SRCVERSION=`cat /sys/module/openvswitch_mod/srcversion`
            LOADED_VERSION=`cat /sys/module/openvswitch_mod/version`
        fi
        SRCVERSION=`modinfo -F srcversion openvswitch 2>/dev/null`
        VERSION=`modinfo -F version openvswitch 2>/dev/null`

        ovs_ctl_log "Package upgrading:\n"\
                    "Loaded version: ${LOADED_VERSION} ${LOADED_SRCVERSION}.\n"\
                    "Version on disk: ${VERSION} ${SRCVERSION}."

        # If the kernel module was previously loaded and it is different than
        # the kernel module on disk, then do a 'force-reload-kmod'.
        if [ -n "${LOADED_SRCVERSION}" ] && [ -n "${SRCVERSION}" ] && \
            [ "${SRCVERSION}" != "${LOADED_SRCVERSION}" ]; then
            start force-reload-kmod
        else
            start restart
        fi
    else
        stop
        start
    fi
}

case $1 in
    start)
        start
	;;
    start-bridges)
        start_bridges
	;;
    stop | force-stop)
        stop
        ;;
    reload | force-reload)
        # The OVS daemons keep up-to-date.
        ;;
    restart)
        shift
        restart "$@"
        ;;
    status)
        ovs_ctl status
        exit $?
        ;;
    force-reload-kmod)
        start force-reload-kmod
        ;;
    load-kmod)
        load_kmod
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|force-reload|status|force-stop|force-reload-kmod|load-kmod|start-bridges}" >&2
        exit 1
        ;;
esac

exit 0
